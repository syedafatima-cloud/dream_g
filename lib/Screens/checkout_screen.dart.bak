import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:flutter/material.dart';
import 'package:mobile_ap/screens/order_tracking_screen.dart';
import 'package:qr_flutter/qr_flutter.dart';
import 'package:google_fonts/google_fonts.dart';

// Modern pastel theme colors
class PastelTheme {
  static const Color primary = Color.fromARGB(255, 197, 157, 216); // Soft purple
  static const Color secondary = Color(0xFFFFC8DD); // Soft pink
  static const Color accent = Color.fromARGB(255, 75, 77, 68); // Dark accent
  static const Color background = Color(0xFFF9F5F6); // Light background
  static const Color cardColor = Color(0xFFFFFFFF); // White
  static const Color cardShadow = Color(0x0D000000); // Light shadow
  static const Color textPrimary = Color(0xFF445566); // Darker blue-gray
  static const Color textSecondary = Color(0xFF7A8999); // Medium blue-gray
  static const Color success = Color(0xFFABD8C6); // Mint green
  static const Color error = Color(0xFFFFADAD); // Soft red
  static const Color divider = Color(0xFFEEEEEE); // Light divider
}

class CheckoutScreen extends StatefulWidget {
  final List<Map<String, dynamic>> cartItems;
  final double totalAmount;
  final String currency;         

  const CheckoutScreen({
    super.key,
    required this.cartItems,
    required this.totalAmount,
    required this.currency,      
  });

  @override
  State<CheckoutScreen> createState() => _CheckoutScreenState();
}

class CheckoutSectionTitle extends StatelessWidget {
  final String title;
  
  const CheckoutSectionTitle({super.key, required this.title});
  
  @override
  Widget build(BuildContext context) {
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 10),
      child: Text(
        title,
        style: GoogleFonts.nunitoSans(
          fontSize: 15, 
          fontWeight: FontWeight.w600,
          color: PastelTheme.textPrimary,
          letterSpacing: 0.3,
        ),
      ),
    );
  }
}

class _CheckoutScreenState extends State<CheckoutScreen> {
  final _formKey = GlobalKey<FormState>();

  final TextEditingController _nameController = TextEditingController();
  final TextEditingController _addressController = TextEditingController();
  final TextEditingController _phoneController = TextEditingController();
  final TextEditingController _messageLinkController = TextEditingController();
  final TextEditingController _discountCodeController = TextEditingController();
  final TextEditingController _cardMessageController = TextEditingController();

  String? _generatedQRData;
  String? _selectedPaymentMethod;
  bool _sameDayDelivery = false;
  bool _isDiscountApplied = false;
  double _discountAmount = 0.0;

  final TextEditingController _cityController = TextEditingController();
String? _selectedCity;

// List of Pakistani cities for dropdown
final List<String> _pakistaniCities = [
  'Karachi', 'Lahore', 'Islamabad', 'Rawalpindi', 'Faisalabad', 
  'Multan', 'Peshawar', 'Quetta', 'Sialkot', 'Gujranwala',
  'Hyderabad', 'Abbottabad', 'Bahawalpur', 'Sargodha', 'Sukkur',
  'Larkana', 'Sheikhupura', 'Rahim Yar Khan', 'Jhang', 'Gujrat'
];
  // Define costs
  final double _sameDayDeliveryCost = 500;
  
  // Price is already in PKR, no conversion needed

  void _applyDiscount() {
    String code = _discountCodeController.text.trim();
    if (code.isNotEmpty) {
      // For this example, we'll accept any code and give 10% off
      setState(() {
        _discountAmount = widget.totalAmount * 0.1; // 10% discount
        _isDiscountApplied = true;
      });
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text(
            "Discount applied successfully!",
            style: GoogleFonts.nunitoSans(fontWeight: FontWeight.w500),
          ),
          backgroundColor: PastelTheme.success,
          behavior: SnackBarBehavior.floating,
          shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(6)),
        ),
      );
    }
  }

  double get _finalTotal {
    double total = widget.totalAmount;
    if (_sameDayDelivery) {
      total += _sameDayDeliveryCost;
    }
    if (_isDiscountApplied) {
      total -= _discountAmount;
    }
    return total;
  }
  
  get order => null;

  void _placeOrder() async {
  if (_formKey.currentState!.validate() && _selectedPaymentMethod != null) {
    try {
      final user = FirebaseAuth.instance.currentUser;
      if (user == null) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text(
              "User not logged in!",
              style: GoogleFonts.nunitoSans(fontWeight: FontWeight.w500),
            ),
            backgroundColor: PastelTheme.error,
            behavior: SnackBarBehavior.floating,
            shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(6)),
          ),
        );
        return;
      }

      final addressData = {
        'fullName': _nameController.text,
        'address': _addressController.text,
        'city': _selectedCity,
        'phoneNumber': _phoneController.text,
        'timestamp': Timestamp.now(),
      };

      await FirebaseFirestore.instance
          .collection('users')
          .doc(user.uid)
          .collection('addresses')
          .add(addressData);

      final orderRef = FirebaseFirestore.instance
          .collection('users')
          .doc(user.uid)
          .collection('orders')
          .doc(); // Create order ID

      final orderData = {
        'orderId': orderRef.id,
        'orderDate': Timestamp.now(),
        'total': _finalTotal,
        'currency': widget.currency,
        'paymentMethod': _selectedPaymentMethod,
        'shippingAddress': addressData,
        'sameDayDelivery': _sameDayDelivery,
        'status': 'Processing', // TRACKING STATUS
        'items': widget.cartItems.map((item) => {
          'name': item['name'],
          'quantity': item['quantity'],
          'price': item['price'],
        }).toList(),
      };
      await FirebaseFirestore.instance.collection('orders').add(order.toMap());
      await orderRef.set(orderData);

      Navigator.pushReplacement(
        context,
        MaterialPageRoute(
          builder: (context) => OrderTrackingScreen(orderId: orderRef.id, userId: user.uid),
        ),
      );
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text(
            "Failed to place order. Please try again.",
            style: GoogleFonts.nunitoSans(fontWeight: FontWeight.w500),
          ),
          backgroundColor: PastelTheme.error,
          behavior: SnackBarBehavior.floating,
          shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(6)),
        ),
      );
    }
  } else if (_selectedPaymentMethod == null) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text(
          "Please select a payment method!",
          style: GoogleFonts.nunitoSans(fontWeight: FontWeight.w500),
        ),
        backgroundColor: PastelTheme.error,
        behavior: SnackBarBehavior.floating,
        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(6)),
      ),
    );
  }
}




  // Modern input decoration with shorter height
  InputDecoration _getInputDecoration(String label) {
    return InputDecoration(
      labelText: label,
      labelStyle: GoogleFonts.nunitoSans(
        color: PastelTheme.textSecondary,
        fontSize: 14,
        fontWeight: FontWeight.w500,
      ),
      filled: true,
      fillColor: Colors.white,
      enabledBorder: OutlineInputBorder(
        borderRadius: BorderRadius.circular(12),
        borderSide: BorderSide(color: PastelTheme.divider, width: 1),
      ),
      focusedBorder: OutlineInputBorder(
        borderRadius: BorderRadius.circular(12),
        borderSide: BorderSide(color: PastelTheme.primary, width: 1.5),
      ),
      errorBorder: OutlineInputBorder(
        borderRadius: BorderRadius.circular(12),
        borderSide: BorderSide(color: PastelTheme.error, width: 1),
      ),
      focusedErrorBorder: OutlineInputBorder(
        borderRadius: BorderRadius.circular(12),
        borderSide: BorderSide(color: PastelTheme.error, width: 1.5),
      ),
      contentPadding: const EdgeInsets.symmetric(horizontal: 16, vertical: 12),
      isDense: true, // Makes the field more compact
    );
  }

  @override
  Widget build(BuildContext context) {
    final textTheme = GoogleFonts.nunitoSansTextTheme();
    
    return Theme(
      data: Theme.of(context).copyWith(
        textTheme: textTheme,
        primaryTextTheme: textTheme,
      ),
      child: Scaffold(
        appBar: AppBar(
          title: Text(
            "Checkout",
            style: GoogleFonts.nunitoSans(
              fontSize: 18,
              fontWeight: FontWeight.w600,
              letterSpacing: 0.3,
              color: Colors.white,
            ),
          ),
          backgroundColor: PastelTheme.primary,
          elevation: 0,
          shape: const RoundedRectangleBorder(
            borderRadius: BorderRadius.vertical(bottom: Radius.circular(16)),
          ),
        ),
        backgroundColor: PastelTheme.background,
        body: SingleChildScrollView(
          child: Column(
            children: [
              // Main content with padding
              Padding(
                padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 12),
                child: Form(
                  key: _formKey,
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      // Shipping Details Card
                      Container(
                        decoration: BoxDecoration(
                          color: PastelTheme.cardColor,
                          borderRadius: BorderRadius.circular(16),
                          boxShadow: [
                            BoxShadow(
                              color: PastelTheme.cardShadow,
                              blurRadius: 8,
                              spreadRadius: 1,
                              offset: const Offset(0, 2),
                            ),
                          ],
                        ),
                        child: Column(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: [
                            // Section header
                            Container(
                              padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 12),
                              decoration: BoxDecoration(
                                color: PastelTheme.primary.withOpacity(0.1),
                                borderRadius: const BorderRadius.vertical(top: Radius.circular(16)),
                              ),
                              child: Row(
                                children: [
                                  Icon(Icons.local_shipping_outlined, size: 18, color: PastelTheme.primary),
                                  const SizedBox(width: 8),
                                  Text(
                                    "Shipping Details",
                                    style: GoogleFonts.nunitoSans(
                                      fontSize: 16, 
                                      fontWeight: FontWeight.w600,
                                      color: PastelTheme.textPrimary,
                                      letterSpacing: 0.3,
                                    ),
                                  ),
                                ],
                              ),
                            ),
                            // Form fields
                            Padding(
                              padding: const EdgeInsets.all(16),
                              child: Column(
                                crossAxisAlignment: CrossAxisAlignment.start,
                                children: [
                                  TextFormField(
                                    controller: _nameController,
                                    decoration: _getInputDecoration("Full Name"),
                                    style: GoogleFonts.nunitoSans(
                                      color: PastelTheme.textPrimary,
                                      fontSize: 14,
                                    ),
                                    validator: (value) => value!.isEmpty ? "Please enter your name" : null,
                                  ),
                                  const SizedBox(height: 16),
                                  TextFormField(
                                    controller: _addressController,
                                    decoration: _getInputDecoration("Address"),
                                    style: GoogleFonts.nunitoSans(
                                      color: PastelTheme.textPrimary,
                                      fontSize: 14,
                                    ),
                                    validator: (value) => value!.isEmpty ? "Please enter your address" : null,
                                  ),
                                  const SizedBox(height: 16),
                                  DropdownButtonFormField<String>(
                                    decoration: _getInputDecoration("City"),
                                    value: _selectedCity,
                                    dropdownColor: Colors.white,
                                    icon: Icon(Icons.arrow_drop_down, color: PastelTheme.primary),
                                    style: GoogleFonts.nunitoSans(
                                      color: PastelTheme.textPrimary,
                                      fontSize: 14,
                                    ),
                                    items: _pakistaniCities.map((city) {
                                      return DropdownMenuItem<String>(
                                        value: city,
                                        child: Text(city),
                                      );
                                    }).toList(),
                                    onChanged: (value) {
                                      setState(() {
                                        _selectedCity = value;
                                      });
                                    },
                                    validator: (value) => value == null ? "Please select a city" : null,
                                  ),
                                  const SizedBox(height: 16),
                                  
                                  TextFormField(
                                    controller: _phoneController,
                                    keyboardType: TextInputType.phone,
                                    decoration: _getInputDecoration("Phone Number"),
                                    style: GoogleFonts.nunitoSans(
                                      color: PastelTheme.textPrimary,
                                      fontSize: 14,
                                    ),
                                    validator: (value) => value!.isEmpty ? "Please enter your phone number" : null,
                                  ),
                          ],
                        ),
                      ),
                    ],
                  ),
                ),

                const SizedBox(height: 16),
                
                // Your Items Card
                Container(
                  decoration: BoxDecoration(
                    color: PastelTheme.cardColor,
                    borderRadius: BorderRadius.circular(16),
                    boxShadow: [
                      BoxShadow(
                        color: PastelTheme.cardShadow,
                        blurRadius: 8,
                        spreadRadius: 1,
                        offset: const Offset(0, 2),
                      ),
                    ],
                  ),
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      // Section header
                      Container(
                        padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 12),
                        decoration: BoxDecoration(
                          color: PastelTheme.primary.withOpacity(0.1),
                          borderRadius: const BorderRadius.vertical(top: Radius.circular(16)),
                        ),
                        child: Row(
                          children: [
                            Icon(Icons.shopping_bag_outlined, size: 18, color: PastelTheme.primary),
                            const SizedBox(width: 8),
                            Text(
                              "Your Items",
                              style: GoogleFonts.nunitoSans(
                                fontSize: 16, 
                                fontWeight: FontWeight.w600,
                                color: PastelTheme.textPrimary,
                                letterSpacing: 0.3,
                              ),
                            ),
                          ],
                        ),
                      ),
                      
                      // Items list
                      Padding(
                        padding: const EdgeInsets.all(16),
                        child: ListView.separated(
                          shrinkWrap: true,
                          physics: const NeverScrollableScrollPhysics(),
                          itemCount: widget.cartItems.length,
                          separatorBuilder: (context, index) => Divider(color: PastelTheme.divider, height: 1),
                          itemBuilder: (context, index) {
                            var item = widget.cartItems[index];
                            return Padding(
                              padding: const EdgeInsets.symmetric(vertical: 8),
                              child: Row(
                                children: [
                                  // Product image
                                  ClipRRect(
                                    borderRadius: BorderRadius.circular(8),
                                    child: Image.network(
                                      item['imageUrl'], 
                                      width: 50, 
                                      height: 50, 
                                      fit: BoxFit.cover,
                                    ),
                                  ),
                                  const SizedBox(width: 12),
                                  
                                  // Product details
                                  Expanded(
                                    child: Column(
                                      crossAxisAlignment: CrossAxisAlignment.start,
                                      children: [
                                        Text(
                                          item['name'], 
                                          style: GoogleFonts.nunitoSans(
                                            fontSize: 14, 
                                            fontWeight: FontWeight.w600,
                                            color: PastelTheme.textPrimary,
                                          ),
                                        ),
                                        const SizedBox(height: 4),
                                        Text(
                                          "PKR ${item['price']} × ${item['quantity']}",
                                          style: GoogleFonts.nunitoSans(
                                            color: PastelTheme.textSecondary,
                                            fontSize: 12,
                                          ),
                                        ),
                                      ],
                                    ),
                                  ),
                                  
                                  // Price and remove button
                                  Column(
                                    crossAxisAlignment: CrossAxisAlignment.end,
                                    children: [
                                      Text(
                                        "PKR ${item['price'] * item['quantity']}",
                                        style: GoogleFonts.nunitoSans(
                                          fontWeight: FontWeight.w600,
                                          fontSize: 14,
                                          color: PastelTheme.primary,
                                        ),
                                      ),
                                      IconButton(
                                        icon: Icon(Icons.delete_outline, color: PastelTheme.accent, size: 20),
                                        padding: EdgeInsets.zero,
                                        constraints: const BoxConstraints(),
                                        tooltip: 'Remove',
                                        onPressed: () {
                                          setState(() {
                                            widget.cartItems.removeAt(index);
                                          });
                                        },
                                      ),
                                    ],
                                  ),
                                ],
                              ),
                            );
                          },
                        ),
                      ),
                    ],
                  ),
                ),

                const SizedBox(height: 12),
                
                _buildSectionCard(
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      const CheckoutSectionTitle(title: "Add Special Message (optional)"),
                      const SizedBox(height: 12),
                      TextFormField(
                        controller: _messageLinkController,
                        decoration: _getInputDecoration("Paste link to your video/voice message"),
                        style: GoogleFonts.nunitoSans(
                          color: PastelTheme.textPrimary,
                          fontSize: 13,
                        ),
                      ),
                      const SizedBox(height: 12),
                      SizedBox(
                        width: double.infinity,
                        child: SizedBox(
                          height: 28,
                          child: ElevatedButton(
                            onPressed: () {
                              setState(() {
                                _generatedQRData = _messageLinkController.text.trim();
                              });
                            },
                            style: ElevatedButton.styleFrom(
                              backgroundColor: PastelTheme.secondary,
                              foregroundColor: PastelTheme.textPrimary,
                              padding: const EdgeInsets.symmetric(vertical: 4),
                              shape: RoundedRectangleBorder(
                                borderRadius: BorderRadius.circular(25),
                              ),
                              elevation: 1,
                            ),
                            child: Text(
                              "Generate QR Code",
                              style: GoogleFonts.nunitoSans(
                                fontSize: 12, 
                                fontWeight: FontWeight.w600,
                              ),
                            ),
                          ),
                        ),
                      ),
                      const SizedBox(height: 16),

                      if (_generatedQRData != null && _generatedQRData!.isNotEmpty)
                        Center(
                          child: Container(
                            padding: const EdgeInsets.all(16),
                            decoration: BoxDecoration(
                              color: Colors.white,
                              borderRadius: BorderRadius.circular(10),
                              boxShadow: [
                                BoxShadow(
                                  color: PastelTheme.accent.withOpacity(0.3),
                                  blurRadius: 12,
                                  offset: const Offset(0, 4),
                                ),
                              ],
                              border: Border.all(color: PastelTheme.accent.withOpacity(0.3), width: 1),
                            ),
                            child: QrImageView(
                              data: _generatedQRData!,
                              version: QrVersions.auto,
                              size: 150.0,
                              backgroundColor: Colors.white,
                              eyeStyle: QrEyeStyle(
                                eyeShape: QrEyeShape.square,
                                color: PastelTheme.primary,
                              ),
                              dataModuleStyle: QrDataModuleStyle(
                                dataModuleShape: QrDataModuleShape.square,
                                color: PastelTheme.textPrimary,
                              ),
                            ),
                          ),
                        ),
                    ],
                  ),
                ),

                const SizedBox(height: 16),
                
                // Payment Method Card
                Container(
                  decoration: BoxDecoration(
                    color: PastelTheme.cardColor,
                    borderRadius: BorderRadius.circular(16),
                    boxShadow: [
                      BoxShadow(
                        color: PastelTheme.cardShadow,
                        blurRadius: 8,
                        spreadRadius: 1,
                        offset: const Offset(0, 2),
                      ),
                    ],
                  ),
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      // Section header
                      Container(
                        padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 12),
                        decoration: BoxDecoration(
                          color: PastelTheme.primary.withOpacity(0.1),
                          borderRadius: const BorderRadius.vertical(top: Radius.circular(16)),
                        ),
                        child: Row(
                          children: [
                            Icon(Icons.payment_outlined, size: 18, color: PastelTheme.primary),
                            const SizedBox(width: 8),
                            Text(
                              "Payment Method",
                              style: GoogleFonts.nunitoSans(
                                fontSize: 16, 
                                fontWeight: FontWeight.w600,
                                color: PastelTheme.textPrimary,
                                letterSpacing: 0.3,
                              ),
                            ),
                          ],
                        ),
                      ),
                      
                      // Payment method dropdown
                      Padding(
                        padding: const EdgeInsets.all(16),
                        child: DropdownButtonFormField<String>(
                          decoration: _getInputDecoration("Select Payment Method"),
                          value: _selectedPaymentMethod,
                          dropdownColor: Colors.white,
                          icon: Icon(Icons.arrow_drop_down, color: PastelTheme.primary),
                          style: GoogleFonts.nunitoSans(
                            color: PastelTheme.textPrimary,
                            fontSize: 14,
                          ),
                          items: [
                            'Cash on Delivery',
                            'Credit/Debit Card',
                            'Easypaisa/JazzCash',
                          ].map((method) {
                            return DropdownMenuItem<String>(
                              value: method,
                              child: Text(method),
                            );
                          }).toList(),
                          onChanged: (value) {
                            setState(() {
                              _selectedPaymentMethod = value;
                            });
                          },
                          validator: (value) => value == null ? "Please select a payment method" : null,
                        ),
                      ),
                    ],
                  ),
                ),

                const SizedBox(height: 16),
                
                // Delivery & Discount Card
                Container(
                  decoration: BoxDecoration(
                    color: PastelTheme.cardColor,
                    borderRadius: BorderRadius.circular(16),
                    boxShadow: [
                      BoxShadow(
                        color: PastelTheme.cardShadow,
                        blurRadius: 8,
                        spreadRadius: 1,
                        offset: const Offset(0, 2),
                      ),
                    ],
                  ),
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      // Section header
                      Container(
                        padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 12),
                        decoration: BoxDecoration(
                          color: PastelTheme.primary.withOpacity(0.1),
                          borderRadius: const BorderRadius.vertical(top: Radius.circular(16)),
                        ),
                        child: Row(
                          children: [
                            Icon(Icons.local_offer_outlined, size: 18, color: PastelTheme.primary),
                            const SizedBox(width: 8),
                            Text(
                              "Delivery & Discounts",
                              style: GoogleFonts.nunitoSans(
                                fontSize: 16, 
                                fontWeight: FontWeight.w600,
                                color: PastelTheme.textPrimary,
                                letterSpacing: 0.3,
                              ),
                            ),
                          ],
                        ),
                      ),
                      
                      Padding(
                        padding: const EdgeInsets.all(16),
                        child: Column(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: [
                            // Same Day Delivery Option
                            Container(
                              padding: const EdgeInsets.all(12),
                              decoration: BoxDecoration(
                                color: _sameDayDelivery ? PastelTheme.primary.withOpacity(0.1) : Colors.white,
                                borderRadius: BorderRadius.circular(12),
                                border: Border.all(color: _sameDayDelivery ? PastelTheme.primary.withOpacity(0.3) : PastelTheme.divider),
                              ),
                              child: Row(
                                mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                children: [
                                  Column(
                                    crossAxisAlignment: CrossAxisAlignment.start,
                                    children: [
                                      Text(
                                        "Same Day Delivery",
                                        style: GoogleFonts.nunitoSans(
                                          fontSize: 14, 
                                          fontWeight: FontWeight.w600,
                                          color: PastelTheme.textPrimary,
                                        ),
                                      ),
                                      const SizedBox(height: 4),
                                      Text(
                                        "PKR 500",
                                        style: GoogleFonts.nunitoSans(
                                          fontSize: 12, 
                                          color: PastelTheme.textSecondary,
                                        ),
                                      ),
                                    ],
                                  ),
                                  Switch(
                                    value: _sameDayDelivery,
                                    onChanged: (value) {
                                      setState(() {
                                        _sameDayDelivery = value;
                                      });
                                    },
                                    activeColor: PastelTheme.primary,
                                    activeTrackColor: PastelTheme.primary.withOpacity(0.4),
                                  ),
                                ],
                              ),
                            ),

                            const SizedBox(height: 20),
                            Text(
                              "Add Discount Code (Optional)",
                              style: GoogleFonts.nunitoSans(
                                fontSize: 14, 
                                fontWeight: FontWeight.w600,
                                color: PastelTheme.textPrimary,
                              ),
                            ),
                            const SizedBox(height: 12),
                            
                            Row(
                              children: [
                                Expanded(
                                  child: TextFormField(
                                    controller: _discountCodeController,
                                    decoration: _getInputDecoration("Enter Discount Code"),
                                    style: GoogleFonts.nunitoSans(
                                      color: PastelTheme.textPrimary,
                                      fontSize: 14,
                                    ),
                                  ),
                                ),
                                const SizedBox(width: 12),
                                ElevatedButton(
                                  onPressed: _applyDiscount,
                                  style: ElevatedButton.styleFrom(
                                    backgroundColor: PastelTheme.secondary,
                                    foregroundColor: PastelTheme.textPrimary,
                                    padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 12),
                                    shape: RoundedRectangleBorder(
                                      borderRadius: BorderRadius.circular(12),
                                    ),
                                    elevation: 0,
                                  ),
                                  child: Text(
                                    "Apply",
                                    style: GoogleFonts.nunitoSans(
                                      fontSize: 14, 
                                      fontWeight: FontWeight.w600,
                                      color: PastelTheme.textPrimary,
                                    ),
                                  ),
                                ),
                              ],
                            ),
                            
                            if (_isDiscountApplied)
                              Padding(
                                padding: const EdgeInsets.only(top: 12),
                                child: Container(
                                  padding: const EdgeInsets.all(12),
                                  decoration: BoxDecoration(
                                    color: PastelTheme.success.withOpacity(0.1),
                                    borderRadius: BorderRadius.circular(12),
                                    border: Border.all(color: PastelTheme.success.withOpacity(0.3)),
                                  ),
                                  child: Row(
                                    children: [
                                      Icon(Icons.check_circle, color: PastelTheme.success, size: 18),
                                      const SizedBox(width: 8),
                                      Text(
                                        "10% discount applied!",
                                        style: GoogleFonts.nunitoSans(
                                          color: PastelTheme.textPrimary,
                                          fontWeight: FontWeight.w500,
                                          fontSize: 14,
                                        ),
                                      ),
                                    ],
                                  ),
                                ),
                              ),
                          ],
                        ),
                      ),
                    ],
                  ),
                ),

                const SizedBox(height: 12),
                
                const SizedBox(height: 16),
                
                // Order Summary Card
                Container(
                  decoration: BoxDecoration(
                    color: PastelTheme.cardColor,
                    borderRadius: BorderRadius.circular(16),
                    boxShadow: [
                      BoxShadow(
                        color: PastelTheme.cardShadow,
                        blurRadius: 8,
                        spreadRadius: 1,
                        offset: const Offset(0, 2),
                      ),
                    ],
                  ),
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      // Section header
                      Container(
                        padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 12),
                        decoration: BoxDecoration(
                          color: PastelTheme.primary.withOpacity(0.1),
                          borderRadius: const BorderRadius.vertical(top: Radius.circular(16)),
                        ),
                        child: Row(
                          children: [
                            Icon(Icons.receipt_long_outlined, size: 18, color: PastelTheme.primary),
                            const SizedBox(width: 8),
                            Text(
                              "Order Summary",
                              style: GoogleFonts.nunitoSans(
                                fontSize: 16, 
                                fontWeight: FontWeight.w600,
                                color: PastelTheme.textPrimary,
                                letterSpacing: 0.3,
                              ),
                            ),
                          ],
                        ),
                      ),
                      
                      // Summary details
                      Padding(
                        padding: const EdgeInsets.all(16),
                        child: Column(
                          children: [
                            Row(
                              mainAxisAlignment: MainAxisAlignment.spaceBetween,
                              children: [
                                Text(
                                  "Subtotal:",
                                  style: GoogleFonts.nunitoSans(
                                    color: PastelTheme.textSecondary,
                                    fontWeight: FontWeight.w500,
                                    fontSize: 14,
                                  ),
                                ),
                                Text(
                                  "PKR ${(widget.totalAmount).toStringAsFixed(0)}",
                                  style: GoogleFonts.nunitoSans(
                                    color: PastelTheme.textPrimary,
                                    fontWeight: FontWeight.w500,
                                    fontSize: 14,
                                  ),
                                ),
                              ],
                            ),
                            const SizedBox(height: 10),
                            
                            if (_sameDayDelivery) ...[
                        Row(
                          mainAxisAlignment: MainAxisAlignment.spaceBetween,
                          children: [
                            Text(
                              "Same Day Delivery:",
                              style: GoogleFonts.nunitoSans(
                                color: PastelTheme.textSecondary,
                                fontWeight: FontWeight.w500,
                              ),
                            ),
                            Text(
                              "PKR ${_sameDayDeliveryCost.toStringAsFixed(0)}",
                              style: GoogleFonts.nunitoSans(
                                color: PastelTheme.textPrimary,
                                fontWeight: FontWeight.w500,
                              ),
                            ),
                          ],
                        ),
                        const SizedBox(height: 8),
                      ],
                      
                      if (_isDiscountApplied) ...[
                        Row(
                          mainAxisAlignment: MainAxisAlignment.spaceBetween,
                          children: [
                            Text(
                              "Discount (10%):",
                              style: GoogleFonts.nunitoSans(
                                color: PastelTheme.success,
                                fontWeight: FontWeight.w500,
                              ),
                            ),
                            Text(
                              "- PKR ${_discountAmount.toStringAsFixed(0)}",
                              style: GoogleFonts.nunitoSans(
                                color: PastelTheme.success,
                                fontWeight: FontWeight.w500,
                              ),
                            ),
                          ],
                        ),
                        const SizedBox(height: 8),
                      ],
                      
                      Divider(height: 24, thickness: 1, color: PastelTheme.divider),
                      
                      Row(
                        mainAxisAlignment: MainAxisAlignment.spaceBetween,
                        children: [
                          Text(
                            "Total Amount:",
                            style: GoogleFonts.nunitoSans(
                              fontSize: 16, 
                              fontWeight: FontWeight.w700,
                              color: PastelTheme.textPrimary,
                            ),
                          ),
                          Text(
                            "PKR ${_finalTotal.toStringAsFixed(0)}",
                            style: GoogleFonts.nunitoSans(
                              fontSize: 18, 
                              fontWeight: FontWeight.w700,
                              color: PastelTheme.primary,
                            ),
                          ),
                        ],
                      ),
                    ],
                  ),
                ),

                const SizedBox(height: 12),
                
                // Place Order Button
                Padding(
                  padding: const EdgeInsets.symmetric(vertical: 8),
                  child: SizedBox(
                    width: double.infinity,
                    height: 50,
                    child: ElevatedButton(
                      onPressed: _placeOrder,
                      style: ElevatedButton.styleFrom(
                        backgroundColor: PastelTheme.primary,
                        foregroundColor: Colors.white,
                        padding: const EdgeInsets.symmetric(vertical: 12),
                        shape: RoundedRectangleBorder(
                          borderRadius: BorderRadius.circular(12),
                        ),
                        elevation: 0,
                      ),
                      child: Row(
                        mainAxisAlignment: MainAxisAlignment.center,
                        children: [
                          const Icon(Icons.shopping_cart_checkout, size: 20),
                          const SizedBox(width: 8),
                          Text(
                            "Place Order",
                            style: GoogleFonts.nunitoSans(
                              fontSize: 16, 
                              fontWeight: FontWeight.w600,
                              letterSpacing: 0.5,
                            ),
                          ),
                        ],
                      ),
                    ),
                  ),
                ),
                
                const SizedBox(height: 24),
              ],
            ),
          ),
        ),
      ),
    );
  }
  
  // Modern unified section card with subtle shadow
  Widget _buildSectionCard({required Widget child, bool isLast = false}) {
    return Container(
      padding: const EdgeInsets.all(16),
      margin: EdgeInsets.only(bottom: isLast ? 0 : 1),
      decoration: BoxDecoration(
        color: PastelTheme.cardColor,
        borderRadius: BorderRadius.circular(16),
        boxShadow: [
          BoxShadow(
            color: PastelTheme.cardShadow,
            blurRadius: 8,
            spreadRadius: 1,
            offset: const Offset(0, 2),
          ),
        ],
      ),
      child: child,
    );
  }
}